# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - ros2
      - main

jobs:
  default:
    strategy:
      fail-fast: false
      matrix:
        env:
          - NAME: "rolling-testing-ccov"
            ROS_REPO: testing
            TARGET_CMAKE_ARGS: -DENABLE_COVERAGE=ON
            CCOV: true
          # TODO: re-enable testing on rolling-main once ros2_control issue is fixed
          # - NAME: "rolling-main"
          #   ROS_REPO: main
          - NAME: "address-leak-ub-sanitizers"
            TARGET_CMAKE_ARGS: |
              -DCMAKE_BUILD_TYPE=Debug
              -DENABLE_SANITIZER_ADDRESS=ON
              -DENABLE_SANITIZER_LEAK=ON
              -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON
          - NAME: "thread-sanitizer-clang"
            TARGET_CMAKE_ARGS: |
              -DCMAKE_BUILD_TYPE=Debug
              -DENABLE_SANITIZER_THREAD=ON
              -DCMAKE_C_COMPILER=clang-10
              -DCMAKE_CXX_COMPILER=clang++-10
            BEFORE_RUN_TARGET_TEST_EMBED: |
              export ASAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-10)
          - NAME: "memory-sanitizer"
            TARGET_CMAKE_ARGS: |
              -DCMAKE_BUILD_TYPE=Debug
              -DENABLE_SANITIZER_MEMORY=ON
            # TODO(tylerjw): fail on iwyu warnings
            # TODO(tylerjw): fix clang-tidy errors
          # - NAME: "static-analyzers"
          #   TARGET_CMAKE_ARGS: |
          #     -DENABLE_CLANG_TIDY=ON
          #     -DENABLE_INCLUDE_WHAT_YOU_USE=ON

    env:
      ROS_DISTRO: rolling
      UPSTREAM_WORKSPACE: upstream.repos
      UPSTREAM_CMAKE_ARGS: |
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld
        -DCMAKE_SHARED_LINKER_FLAGS=-fuse-ld=lld
        -DCMAKE_MODULE_LINKER_FLAGS=-fuse-ld=lld
      # Clear the ccache stats before and log the stats after the build
      AFTER_SETUP_CCACHE: ccache --zero-stats --max-size=10.0G
      AFTER_BUILD_TARGET_WORKSPACE: ccache --show-stats
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      BASEDIR: ${{ github.workspace }}/.work
      ADDITIONAL_DEBS: clang-10 clang-9 clang-tidy iwyu lld llvm-10

    name: ${{ matrix.env.NAME }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: tylerjw
      - name: Cache ccache
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ matrix.env.NAME }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ matrix.env.NAME }}-${{ github.sha }}
            ${{ matrix.env.NAME }}
      - id: ici
        name: Run industrial_ci
        uses: ros-industrial/industrial_ci@master
        env: ${{ matrix.env }}
      - name: Push result to Testspace server
        if: always()
        run: |
          testspace "[ ${{ matrix.env.NAME }} ]${{ env.BASEDIR }}/target_ws/**/test_results/**/*.xml"
      - name: Upload test artifacts (on failure)
        uses: actions/upload-artifact@v2
        if: failure() && (steps.ici.outputs.run_target_test || steps.ici.outputs.target_test_results)
        with:
          name: test-results-${{ matrix.env.NAME }}
          path: ${{ env.BASEDIR }}/target_ws/**/test_results/**/*.xml
      - name: Generate codecov report
        uses: rhaschke/lcov-action@main
        if: matrix.env.CCOV && steps.ici.outputs.target_test_results == '0'
        with:
          docker: ros:rolling-ros-base-focal
          workdir: ${{ env.BASEDIR }}/target_ws
          ignore: '"*/target_ws/build/*" "*/target_ws/install/*" "*/test/*" "*/_external/*"'
      - name: Upload codecov report
        uses: codecov/codecov-action@v2
        if: matrix.env.CCOV && steps.ici.outputs.target_test_results == '0'
        with:
          files: ${{ env.BASEDIR }}/target_ws/coverage.info
      - name: Upload coveralls report
        uses: coverallsapp/github-action@master
        if: matrix.env.CCOV && steps.ici.outputs.target_test_results == '0'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ env.BASEDIR }}/target_ws/coverage.info
